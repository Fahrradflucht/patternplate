'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(['', ''], ['', '']);

exports.btoa = btoa;
exports.parse = parse;
exports.png = png;
exports.purge = purge;
exports.render = render;
exports.sanitize = sanitize;
exports.stringify = stringify;

var _btoa = require('btoa');

var _btoa2 = _interopRequireDefault(_btoa);

var _react = require('react');

var _styledComponents = require('styled-components');

var _styledComponents2 = _interopRequireDefault(_styledComponents);

var _xmldom = require('xmldom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parser = new _xmldom.DOMParser();
var serializer = new _xmldom.XMLSerializer();

var TAG_NAMES = ['circle', 'g', 'path', 'polygon', 'rect', 'svg'];

var ATTRIBUTES = {
	circle: ['cx', 'cy', 'r', 'fill', 'stroke', 'style'],
	g: ['x', 'y', 'style'],
	path: ['d', 'fill', 'stroke', 'style'],
	polygon: ['points', 'fill', 'stroke', 'style'],
	rect: ['x', 'y', 'width', 'height', 'fill', 'stroke', 'style'],
	svg: ['width', 'height', 'viewBox', 'x', 'y', 'style', 'xmlns']
};

function attributes(node, key) {
	return (ATTRIBUTES[node.tagName] || []).reduce(function (props, name) {
		var attribute = node.attributes.getNamedItem(name);
		if (attribute && attribute.specified) {
			props[name] = attribute.value;
		}
		return props;
	}, { key: key });
}

function btoa(source) {
	return 'data:image/svg+xml;base64,' + (0, _btoa2.default)(source);
}

function parse(source) {
	var doc = parser.parseFromString(source, 'image/svg+xml');
	var parsed = [].concat((0, _toConsumableArray3.default)(doc.childNodes)).find(function (node) {
		return node.tagName === 'svg';
	});
	parsed.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
	return parsed;
}

function png(source) {
	return new _promise2.default(function (resolve, reject) {
		var img = new global.Image();
		var canvas = global.document.createElement('canvas');
		var ratio = global.devicePixelRatio || 1;

		canvas.width = 16 * ratio;
		canvas.height = 16 * ratio;

		var context = canvas.getContext('2d');

		img.onload = function () {
			context.drawImage(img, 0, 0);
			resolve(canvas.toDataURL('image/png'));
		};

		img.onerror = function (err) {
			return reject(err);
		};

		img.src = btoa(source);
	});
}

function purge(parsed) {
	return [].concat((0, _toConsumableArray3.default)(parsed)).filter(function (node) {
		return TAG_NAMES.includes(node.tagName);
	}).map(function (node) {
		node.childNodes = purge(node.childNodes);

		var attributes = ATTRIBUTES[node.tagName] || [];

		for (var i = 0; i < node.attributes.length; i++) {
			var attribute = node.attributes[i];
			if (!attributes.includes(attribute.name)) {
				node.removeAttribute(attribute.name);
			}
		}

		return node;
	});
}

function render(element) {
	var _element = (0, _slicedToArray3.default)(element, 3),
	    tagName = _element[0],
	    props = _element[1],
	    _element$ = _element[2],
	    children = _element$ === undefined ? [] : _element$;

	var style = props.style,
	    rest = (0, _objectWithoutProperties3.default)(props, ['style']);

	var tag = (0, _styledComponents2.default)(tagName)(_templateObject, style);
	return (0, _react.createElement)(tag, rest, children.map(function (c) {
		return render(c);
	}));
}

function sanitize(parsed) {
	return [].concat((0, _toConsumableArray3.default)(parsed)).map(function (node, i) {
		return [node.tagName, attributes(node, i), sanitize(node.childNodes)];
	});
}

function stringify(tree) {
	return serializer.serializeToString(tree);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,