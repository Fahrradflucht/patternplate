'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.type = undefined;

var _patchLocation = require('./patch-location');

var _patchLocation2 = _interopRequireDefault(_patchLocation);

var _item = require('../selectors/item');

var _item2 = _interopRequireDefault(_item);

var _pool = require('../selectors/pool');

var _pool2 = _interopRequireDefault(_pool);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = arrow;
var type = exports.type = 'ARROW';

var OFFSETS = {
	up: -1,
	down: 1,
	default: 0
};

function arrow(payload) {
	return function (dispatch, getState) {
		var state = getState();

		// Is handled locally
		if (state.searchEnabled) {
			return;
		}

		if (!state.navigationEnabled) {
			return;
		}

		switch (payload) {
			case 'left':
				{
					var i = (0, _item2.default)(state);
					var p = (0, _pool2.default)(state);
					var id = i.path.slice(0, i.path.length - 1).join('/');
					var next = p.find(function (i) {
						return i.id === id;
					});
					return next && next.href && go(dispatch)(next.href);
				}
			case 'up':
			case 'down':
			default:
				{
					var offset = payload in OFFSETS ? OFFSETS[payload] : OFFSETS.default;
					var _next = jump((0, _pool2.default)(state), (0, _item2.default)(state), offset);
					return _next && go(dispatch)(_next);
				}
		}
	};
}

function go(dispatch) {
	return function (next) {
		return dispatch((0, _patchLocation2.default)({
			pathname: next === '/' ? next : '/' + next
		}));
	};
}

function jump(pool, start, offset) {
	if (!start) {
		return '';
	}

	if (offset === 0) {
		return start;
	}

	var result = start.href;
	var index = pool.indexOf(start);

	while (result === start.href) {
		index += offset;
		result = pool[index].href;

		if (offset < 0 && index === 0) {
			break;
		}
		if (offset > 0 && index === pool.length) {
			break;
		}
	}

	return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NvdXJjZS9hcHBsaWNhdGlvbi9hY3Rpb25zL2Fycm93LmpzIl0sIm5hbWVzIjpbImFycm93IiwidHlwZSIsIk9GRlNFVFMiLCJ1cCIsImRvd24iLCJkZWZhdWx0IiwicGF5bG9hZCIsImRpc3BhdGNoIiwiZ2V0U3RhdGUiLCJzdGF0ZSIsInNlYXJjaEVuYWJsZWQiLCJuYXZpZ2F0aW9uRW5hYmxlZCIsImkiLCJwIiwiaWQiLCJwYXRoIiwic2xpY2UiLCJsZW5ndGgiLCJqb2luIiwibmV4dCIsImZpbmQiLCJocmVmIiwiZ28iLCJvZmZzZXQiLCJqdW1wIiwicGF0aG5hbWUiLCJwb29sIiwic3RhcnQiLCJyZXN1bHQiLCJpbmRleCIsImluZGV4T2YiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztrQkFFZUEsSztBQUNSLElBQU1DLHNCQUFPLE9BQWI7O0FBRVAsSUFBTUMsVUFBVTtBQUNmQyxLQUFJLENBQUMsQ0FEVTtBQUVmQyxPQUFNLENBRlM7QUFHZkMsVUFBUztBQUhNLENBQWhCOztBQU1BLFNBQVNMLEtBQVQsQ0FBZU0sT0FBZixFQUF3QjtBQUN2QixRQUFPLFVBQUNDLFFBQUQsRUFBV0MsUUFBWCxFQUF3QjtBQUM5QixNQUFNQyxRQUFRRCxVQUFkOztBQUVBO0FBQ0EsTUFBSUMsTUFBTUMsYUFBVixFQUF5QjtBQUN4QjtBQUNBOztBQUVELE1BQUksQ0FBQ0QsTUFBTUUsaUJBQVgsRUFBOEI7QUFDN0I7QUFDQTs7QUFFRCxVQUFRTCxPQUFSO0FBQ0MsUUFBSyxNQUFMO0FBQWE7QUFDWixTQUFNTSxJQUFJLG9CQUFXSCxLQUFYLENBQVY7QUFDQSxTQUFNSSxJQUFJLG9CQUFXSixLQUFYLENBQVY7QUFDQSxTQUFNSyxLQUFLRixFQUFFRyxJQUFGLENBQU9DLEtBQVAsQ0FBYSxDQUFiLEVBQWdCSixFQUFFRyxJQUFGLENBQU9FLE1BQVAsR0FBZ0IsQ0FBaEMsRUFBbUNDLElBQW5DLENBQXdDLEdBQXhDLENBQVg7QUFDQSxTQUFNQyxPQUFPTixFQUFFTyxJQUFGLENBQU87QUFBQSxhQUFLUixFQUFFRSxFQUFGLEtBQVNBLEVBQWQ7QUFBQSxNQUFQLENBQWI7QUFDQSxZQUFPSyxRQUFRQSxLQUFLRSxJQUFiLElBQXFCQyxHQUFHZixRQUFILEVBQWFZLEtBQUtFLElBQWxCLENBQTVCO0FBQ0E7QUFDRCxRQUFLLElBQUw7QUFDQSxRQUFLLE1BQUw7QUFDQTtBQUFTO0FBQ1IsU0FBTUUsU0FBU2pCLFdBQVdKLE9BQVgsR0FBcUJBLFFBQVFJLE9BQVIsQ0FBckIsR0FBd0NKLFFBQVFHLE9BQS9EO0FBQ0EsU0FBTWMsUUFBT0ssS0FBSyxvQkFBV2YsS0FBWCxDQUFMLEVBQXdCLG9CQUFXQSxLQUFYLENBQXhCLEVBQTJDYyxNQUEzQyxDQUFiO0FBQ0EsWUFBT0osU0FBUUcsR0FBR2YsUUFBSCxFQUFhWSxLQUFiLENBQWY7QUFDQTtBQWRGO0FBZ0JBLEVBNUJEO0FBNkJBOztBQUVELFNBQVNHLEVBQVQsQ0FBWWYsUUFBWixFQUFzQjtBQUNyQixRQUFPO0FBQUEsU0FBUUEsU0FDZCw2QkFBTTtBQUNMa0IsYUFBVU4sU0FBUyxHQUFULEdBQWVBLElBQWYsU0FBMEJBO0FBRC9CLEdBQU4sQ0FEYyxDQUFSO0FBQUEsRUFBUDtBQUtBOztBQUVELFNBQVNLLElBQVQsQ0FBY0UsSUFBZCxFQUFvQkMsS0FBcEIsRUFBMkJKLE1BQTNCLEVBQW1DO0FBQ2xDLEtBQUksQ0FBQ0ksS0FBTCxFQUFZO0FBQ1gsU0FBTyxFQUFQO0FBQ0E7O0FBRUQsS0FBSUosV0FBVyxDQUFmLEVBQWtCO0FBQ2pCLFNBQU9JLEtBQVA7QUFDQTs7QUFFRCxLQUFJQyxTQUFTRCxNQUFNTixJQUFuQjtBQUNBLEtBQUlRLFFBQVFILEtBQUtJLE9BQUwsQ0FBYUgsS0FBYixDQUFaOztBQUVBLFFBQU9DLFdBQVdELE1BQU1OLElBQXhCLEVBQThCO0FBQzdCUSxXQUFTTixNQUFUO0FBQ0FLLFdBQVNGLEtBQUtHLEtBQUwsRUFBWVIsSUFBckI7O0FBRUEsTUFBSUUsU0FBUyxDQUFULElBQWNNLFVBQVUsQ0FBNUIsRUFBK0I7QUFDOUI7QUFDQTtBQUNELE1BQUlOLFNBQVMsQ0FBVCxJQUFjTSxVQUFVSCxLQUFLVCxNQUFqQyxFQUF5QztBQUN4QztBQUNBO0FBQ0Q7O0FBRUQsUUFBT1csTUFBUDtBQUNBIiwiZmlsZSI6ImFycm93LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGNoIGZyb20gJy4vcGF0Y2gtbG9jYXRpb24nO1xuaW1wb3J0IHNlbGVjdEl0ZW0gZnJvbSAnLi4vc2VsZWN0b3JzL2l0ZW0nO1xuaW1wb3J0IHNlbGVjdFBvb2wgZnJvbSAnLi4vc2VsZWN0b3JzL3Bvb2wnO1xuXG5leHBvcnQgZGVmYXVsdCBhcnJvdztcbmV4cG9ydCBjb25zdCB0eXBlID0gJ0FSUk9XJztcblxuY29uc3QgT0ZGU0VUUyA9IHtcblx0dXA6IC0xLFxuXHRkb3duOiAxLFxuXHRkZWZhdWx0OiAwXG59O1xuXG5mdW5jdGlvbiBhcnJvdyhwYXlsb2FkKSB7XG5cdHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlKSA9PiB7XG5cdFx0Y29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuXG5cdFx0Ly8gSXMgaGFuZGxlZCBsb2NhbGx5XG5cdFx0aWYgKHN0YXRlLnNlYXJjaEVuYWJsZWQpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXN0YXRlLm5hdmlnYXRpb25FbmFibGVkKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0c3dpdGNoIChwYXlsb2FkKSB7XG5cdFx0XHRjYXNlICdsZWZ0Jzoge1xuXHRcdFx0XHRjb25zdCBpID0gc2VsZWN0SXRlbShzdGF0ZSk7XG5cdFx0XHRcdGNvbnN0IHAgPSBzZWxlY3RQb29sKHN0YXRlKTtcblx0XHRcdFx0Y29uc3QgaWQgPSBpLnBhdGguc2xpY2UoMCwgaS5wYXRoLmxlbmd0aCAtIDEpLmpvaW4oJy8nKTtcblx0XHRcdFx0Y29uc3QgbmV4dCA9IHAuZmluZChpID0+IGkuaWQgPT09IGlkKTtcblx0XHRcdFx0cmV0dXJuIG5leHQgJiYgbmV4dC5ocmVmICYmIGdvKGRpc3BhdGNoKShuZXh0LmhyZWYpO1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSAndXAnOlxuXHRcdFx0Y2FzZSAnZG93bic6XG5cdFx0XHRkZWZhdWx0OiB7XG5cdFx0XHRcdGNvbnN0IG9mZnNldCA9IHBheWxvYWQgaW4gT0ZGU0VUUyA/IE9GRlNFVFNbcGF5bG9hZF0gOiBPRkZTRVRTLmRlZmF1bHQ7XG5cdFx0XHRcdGNvbnN0IG5leHQgPSBqdW1wKHNlbGVjdFBvb2woc3RhdGUpLCBzZWxlY3RJdGVtKHN0YXRlKSwgb2Zmc2V0KTtcblx0XHRcdFx0cmV0dXJuIG5leHQgJiYgZ28oZGlzcGF0Y2gpKG5leHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gZ28oZGlzcGF0Y2gpIHtcblx0cmV0dXJuIG5leHQgPT4gZGlzcGF0Y2goXG5cdFx0cGF0Y2goe1xuXHRcdFx0cGF0aG5hbWU6IG5leHQgPT09ICcvJyA/IG5leHQgOiBgLyR7bmV4dH1gXG5cdFx0fSlcblx0KTtcbn1cblxuZnVuY3Rpb24ganVtcChwb29sLCBzdGFydCwgb2Zmc2V0KSB7XG5cdGlmICghc3RhcnQpIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRpZiAob2Zmc2V0ID09PSAwKSB7XG5cdFx0cmV0dXJuIHN0YXJ0O1xuXHR9XG5cblx0bGV0IHJlc3VsdCA9IHN0YXJ0LmhyZWY7XG5cdGxldCBpbmRleCA9IHBvb2wuaW5kZXhPZihzdGFydCk7XG5cblx0d2hpbGUgKHJlc3VsdCA9PT0gc3RhcnQuaHJlZikge1xuXHRcdGluZGV4ICs9IG9mZnNldDtcblx0XHRyZXN1bHQgPSBwb29sW2luZGV4XS5ocmVmO1xuXG5cdFx0aWYgKG9mZnNldCA8IDAgJiYgaW5kZXggPT09IDApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRpZiAob2Zmc2V0ID4gMCAmJiBpbmRleCA9PT0gcG9vbC5sZW5ndGgpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXN1bHQ7XG59XG4iXX0=