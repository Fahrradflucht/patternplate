'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.flatten = flatten;
exports.sanitize = sanitize;
exports.enrich = enrich;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _frontMatter = require('front-matter');

var _frontMatter2 = _interopRequireDefault(_frontMatter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WEIGHTS = {
	folder: 0,
	doc: 1,
	pattern: 2
};

function flatten(tree) {
	if (!tree) {
		return [];
	}

	/**
  * This defines the schema of items to be found
  * in all tree and pool representations of patterns,
  * docs and folders
  */
	var init = [{
		contents: tree.contents,
		demoDependencies: tree.demoDependencies,
		demoDependents: tree.demoDependents,
		dependencies: tree.dependencies,
		dependents: tree.dependents,
		envs: tree.envs,
		href: tree.href,
		id: tree.id,
		manifest: tree.manifest,
		name: tree.name,
		path: tree.path,
		type: tree.type
	}];

	return (tree.children || []).reduce(function (reg, child) {
		return [].concat((0, _toConsumableArray3.default)(reg), (0, _toConsumableArray3.default)(flatten(child)));
	}, init);
}

function sanitize(tree, context) {
	var hide = context.hide,
	    id = context.id,
	    _context$config = context.config,
	    config = _context$config === undefined ? {} : _context$config,
	    prefix = context.prefix;

	var filter = hide ? function (child) {
		return !child.manifest.options.hidden;
	} : function (i) {
		return i;
	};

	tree.children = tree.children.filter(filter).map(function (child) {
		var enriched = enrich(child, { hide: hide, id: id, config: config, prefix: prefix });
		return enriched.children ? sanitize(enriched, { hide: hide, id: id, config: config, prefix: prefix }) : enriched;
	}).sort(function (a, b) {
		var order = (a.manifest.options.order || 0) - (b.manifest.options.order || 0);
		var weight = (WEIGHTS[a.type] || 0) - (WEIGHTS[b.type] || 0);
		var comp = a.manifest.displayName.localeCompare(b.manifest.displayName);

		if (order !== 0) {
			return order;
		}

		if (weight !== 0) {
			return weight;
		}

		return comp;
	});

	return enrich(tree, { id: id, config: config, prefix: prefix });
}

function enrich(child, _ref) {
	var id = _ref.id,
	    config = _ref.config,
	    prefix = _ref.prefix;

	var p = prefix.split('/');
	var fragments = id.split('/').filter(function (f, i) {
		return p[i] !== f;
	});

	child.active = child.id === 'root' ? id === '/' : (child.path || ['/']).every(function (f, i) {
		return fragments[i] === f;
	});

	child.href = child.href || _path2.default.join(prefix, child.id);
	child.warnings = child.warnings || [];

	if (child.id in config) {
		var o = config[child.id];
		child.manifest.displayName = o.displayName || child.manifest.displayName;
		child.manifest.options.order = o.order || child.manifest.options.order;
		child.manifest.options.icon = o.icon || child.manifest.options.icon;
	}

	if (child.manifest && child.type === 'pattern' && (child.manifest.flag === 'alpha' || child.manifest.flag === 'deprecated')) {
		child.warnings.push({
			type: 'flag',
			value: child.manifest.flag,
			message: child.manifest.displayName + ' is flagged as ' + child.manifest.flag + '.'
		});
	}

	// If there is no special content in a folder show the first child
	if (child.children && child.children.length > 0 && (!child.contents || !(0, _frontMatter2.default)(child.contents).body)) {
		child.href = child.children[0].href;
	}

	return child;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,